name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'canary'
        type: choice
        options:
          - latest
          - canary

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: preview
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Setup Node.js (for npm registry)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build packages
        run: bun run build

      - name: Build plugins
        run: bun --filter="./plugins/*" run build

      - name: Run typecheck
        run: |
          bun --filter="*" run typecheck

      - name: Version and publish types
        run: |
          cd packages/types
          if [ "${{ inputs.release_type }}" = "latest" ]; then
            bun pm version patch --no-git-tag-version
            bun publish --access public
          else
            COMMIT_SHA=$(git rev-parse --short HEAD)
            CURRENT_VERSION=$(bun -e "console.log(require('./package.json').version)")
            BASE_VERSION=${CURRENT_VERSION%-canary.*}
            NEW_VERSION="${BASE_VERSION}-canary.${COMMIT_SHA}"
            bun pm pkg set version="${NEW_VERSION}"
            bun publish --tag canary --access public
          fi
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update workspace dependencies
        run: bun install

      - name: Version and publish OneAPI
        run: |
          cd packages/oneapi
          if [ "${{ inputs.release_type }}" = "latest" ]; then
            bun pm version patch --no-git-tag-version
            bun publish --access public
          else
            COMMIT_SHA=$(git rev-parse --short HEAD)
            CURRENT_VERSION=$(bun -e "console.log(require('./package.json').version)")
            BASE_VERSION=${CURRENT_VERSION%-canary.*}
            NEW_VERSION="${BASE_VERSION}-canary.${COMMIT_SHA}"
            bun pm pkg set version="${NEW_VERSION}"
            bun publish --tag canary --access public
          fi
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update workspace dependencies
        run: bun install

      - name: Version and publish UI
        run: |
          cd packages/ui
          if [ "${{ inputs.release_type }}" = "latest" ]; then
            bun pm version patch --no-git-tag-version
            bun publish --access public
          else
            COMMIT_SHA=$(git rev-parse --short HEAD)
            CURRENT_VERSION=$(bun -e "console.log(require('./package.json').version)")
            BASE_VERSION=${CURRENT_VERSION%-canary.*}
            NEW_VERSION="${BASE_VERSION}-canary.${COMMIT_SHA}"
            bun pm pkg set version="${NEW_VERSION}"
            bun publish --tag canary --access public
          fi
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update workspace dependencies
        run: bun install

      - name: Version and publish Core
        run: |
          cd packages/core
          if [ "${{ inputs.release_type }}" = "latest" ]; then
            bun pm version patch --no-git-tag-version
            bun publish --access public
          else
            COMMIT_SHA=$(git rev-parse --short HEAD)
            CURRENT_VERSION=$(bun -e "console.log(require('./package.json').version)")
            BASE_VERSION=${CURRENT_VERSION%-canary.*}
            NEW_VERSION="${BASE_VERSION}-canary.${COMMIT_SHA}"
            bun pm pkg set version="${NEW_VERSION}"
            bun publish --tag canary --access public
          fi
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update workspace dependencies
        run: bun install

      - name: Commit and push version changes
        if: inputs.release_type == 'latest'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add packages/*/package.json
          git diff --staged --quiet || git commit -m "chore: bump package versions [skip ci]"
          git push
